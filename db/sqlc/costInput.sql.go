// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: costInput.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCostInput = `-- name: CreateCostInput :one
INSERT INTO cost_input (
    type,
    is_deleted
) VALUES (
    $1,
    $2
) RETURNING id, type, is_deleted, created_at, updated_at
`

type CreateCostInputParams struct {
	Type      string      `json:"type"`
	IsDeleted pgtype.Bool `json:"is_deleted"`
}

func (q *Queries) CreateCostInput(ctx context.Context, arg CreateCostInputParams) (CostInput, error) {
	row := q.db.QueryRow(ctx, createCostInput, arg.Type, arg.IsDeleted)
	var i CostInput
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllCostInput = `-- name: GetAllCostInput :many
SELECT id, type, is_deleted, created_at, updated_at FROM cost_input
`

func (q *Queries) GetAllCostInput(ctx context.Context) ([]CostInput, error) {
	rows, err := q.db.Query(ctx, getAllCostInput)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CostInput{}
	for rows.Next() {
		var i CostInput
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
