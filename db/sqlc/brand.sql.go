// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: brand.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBrand = `-- name: CreateBrand :one
INSERT INTO brand (
    name,
    logo,
    website,
    validated,
    is_deleted
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING id, name, logo, website, validated, is_deleted, created_at, updated_at
`

type CreateBrandParams struct {
	Name      string      `json:"name"`
	Logo      pgtype.Text `json:"logo"`
	Website   pgtype.Text `json:"website"`
	Validated pgtype.Bool `json:"validated"`
	IsDeleted pgtype.Bool `json:"is_deleted"`
}

func (q *Queries) CreateBrand(ctx context.Context, arg CreateBrandParams) (Brand, error) {
	row := q.db.QueryRow(ctx, createBrand,
		arg.Name,
		arg.Logo,
		arg.Website,
		arg.Validated,
		arg.IsDeleted,
	)
	var i Brand
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Logo,
		&i.Website,
		&i.Validated,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllBrand = `-- name: GetAllBrand :many
SELECT id, name, logo, website, validated, is_deleted, created_at, updated_at FROM brand
`

func (q *Queries) GetAllBrand(ctx context.Context) ([]Brand, error) {
	rows, err := q.db.Query(ctx, getAllBrand)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Brand{}
	for rows.Next() {
		var i Brand
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Logo,
			&i.Website,
			&i.Validated,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
