// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: entryfield.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createEntryField = `-- name: CreateEntryField :one
INSERT INTO entry_fields (
    calculation_type_id,
    user_email,
    calculation_date,
    park_id,
    asset_value,
    inventory_value,
    tax_asset_value,
    asset_increase_percentage,
    park_home_number,
    vat,
    ground,
    squarem2,
    constructions_year,
    renovation_percentage,
    yearly_revenue,
    yearly_revenue_increase_perc,
    asset_loan,
    loan_interest,
    is_deleted
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    $10,
    $11,
    $12,
    $13,
    $14,
    $15,
    $16,
    $17,
    $18,
    $19
) RETURNING id, calculation_type_id, user_email, calculation_date, park_id, asset_value, inventory_value, tax_asset_value, asset_increase_percentage, park_home_number, vat, ground, squarem2, constructions_year, renovation_percentage, yearly_revenue, yearly_revenue_increase_perc, asset_loan, loan_interest, is_deleted, created_at, updated_at
`

type CreateEntryFieldParams struct {
	CalculationTypeID         int32       `json:"calculation_type_id"`
	UserEmail                 string      `json:"user_email"`
	CalculationDate           pgtype.Date `json:"calculation_date"`
	ParkID                    int32       `json:"park_id"`
	AssetValue                pgtype.Int4 `json:"asset_value"`
	InventoryValue            pgtype.Int4 `json:"inventory_value"`
	TaxAssetValue             pgtype.Int4 `json:"tax_asset_value"`
	AssetIncreasePercentage   pgtype.Int4 `json:"asset_increase_percentage"`
	ParkHomeNumber            pgtype.Int4 `json:"park_home_number"`
	Vat                       pgtype.Bool `json:"vat"`
	Ground                    pgtype.Bool `json:"ground"`
	Squarem2                  pgtype.Int4 `json:"squarem2"`
	ConstructionsYear         pgtype.Date `json:"constructions_year"`
	RenovationPercentage      pgtype.Int4 `json:"renovation_percentage"`
	YearlyRevenue             pgtype.Int4 `json:"yearly_revenue"`
	YearlyRevenueIncreasePerc pgtype.Int4 `json:"yearly_revenue_increase_perc"`
	AssetLoan                 pgtype.Int4 `json:"asset_loan"`
	LoanInterest              pgtype.Int4 `json:"loan_interest"`
	IsDeleted                 pgtype.Bool `json:"is_deleted"`
}

func (q *Queries) CreateEntryField(ctx context.Context, arg CreateEntryFieldParams) (EntryField, error) {
	row := q.db.QueryRow(ctx, createEntryField,
		arg.CalculationTypeID,
		arg.UserEmail,
		arg.CalculationDate,
		arg.ParkID,
		arg.AssetValue,
		arg.InventoryValue,
		arg.TaxAssetValue,
		arg.AssetIncreasePercentage,
		arg.ParkHomeNumber,
		arg.Vat,
		arg.Ground,
		arg.Squarem2,
		arg.ConstructionsYear,
		arg.RenovationPercentage,
		arg.YearlyRevenue,
		arg.YearlyRevenueIncreasePerc,
		arg.AssetLoan,
		arg.LoanInterest,
		arg.IsDeleted,
	)
	var i EntryField
	err := row.Scan(
		&i.ID,
		&i.CalculationTypeID,
		&i.UserEmail,
		&i.CalculationDate,
		&i.ParkID,
		&i.AssetValue,
		&i.InventoryValue,
		&i.TaxAssetValue,
		&i.AssetIncreasePercentage,
		&i.ParkHomeNumber,
		&i.Vat,
		&i.Ground,
		&i.Squarem2,
		&i.ConstructionsYear,
		&i.RenovationPercentage,
		&i.YearlyRevenue,
		&i.YearlyRevenueIncreasePerc,
		&i.AssetLoan,
		&i.LoanInterest,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllEntryField = `-- name: GetAllEntryField :many
SELECT id, calculation_type_id, user_email, calculation_date, park_id, asset_value, inventory_value, tax_asset_value, asset_increase_percentage, park_home_number, vat, ground, squarem2, constructions_year, renovation_percentage, yearly_revenue, yearly_revenue_increase_perc, asset_loan, loan_interest, is_deleted, created_at, updated_at FROM entry_fields
`

func (q *Queries) GetAllEntryField(ctx context.Context) ([]EntryField, error) {
	rows, err := q.db.Query(ctx, getAllEntryField)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EntryField{}
	for rows.Next() {
		var i EntryField
		if err := rows.Scan(
			&i.ID,
			&i.CalculationTypeID,
			&i.UserEmail,
			&i.CalculationDate,
			&i.ParkID,
			&i.AssetValue,
			&i.InventoryValue,
			&i.TaxAssetValue,
			&i.AssetIncreasePercentage,
			&i.ParkHomeNumber,
			&i.Vat,
			&i.Ground,
			&i.Squarem2,
			&i.ConstructionsYear,
			&i.RenovationPercentage,
			&i.YearlyRevenue,
			&i.YearlyRevenueIncreasePerc,
			&i.AssetLoan,
			&i.LoanInterest,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
