// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: park.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPark = `-- name: CreatePark :one
INSERT INTO park (
    brand_id,
    name,
    country_id,
    validated,
    is_deleted
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5
) RETURNING id, brand_id, name, country_id, validated, is_deleted, created_at, updated_at
`

type CreateParkParams struct {
	BrandID   int32       `json:"brand_id"`
	Name      string      `json:"name"`
	CountryID pgtype.Int4 `json:"country_id"`
	Validated pgtype.Bool `json:"validated"`
	IsDeleted pgtype.Bool `json:"is_deleted"`
}

func (q *Queries) CreatePark(ctx context.Context, arg CreateParkParams) (Park, error) {
	row := q.db.QueryRow(ctx, createPark,
		arg.BrandID,
		arg.Name,
		arg.CountryID,
		arg.Validated,
		arg.IsDeleted,
	)
	var i Park
	err := row.Scan(
		&i.ID,
		&i.BrandID,
		&i.Name,
		&i.CountryID,
		&i.Validated,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllPark = `-- name: GetAllPark :many
SELECT id, brand_id, name, country_id, validated, is_deleted, created_at, updated_at FROM park
`

func (q *Queries) GetAllPark(ctx context.Context) ([]Park, error) {
	rows, err := q.db.Query(ctx, getAllPark)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Park{}
	for rows.Next() {
		var i Park
		if err := rows.Scan(
			&i.ID,
			&i.BrandID,
			&i.Name,
			&i.CountryID,
			&i.Validated,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getParksByBrand = `-- name: GetParksByBrand :many
SELECT id, brand_id, name, country_id, validated, is_deleted, created_at, updated_at FROM park 
WHERE brand_id = $1 
ORDER BY name
`

func (q *Queries) GetParksByBrand(ctx context.Context, brandID int32) ([]Park, error) {
	rows, err := q.db.Query(ctx, getParksByBrand, brandID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Park{}
	for rows.Next() {
		var i Park
		if err := rows.Scan(
			&i.ID,
			&i.BrandID,
			&i.Name,
			&i.CountryID,
			&i.Validated,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
