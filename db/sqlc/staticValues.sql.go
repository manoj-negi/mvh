// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: staticValues.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStaticValues = `-- name: CreateStaticValues :one
INSERT INTO static_values (
    cost_input_id,
    description,
    value,
    is_deleted
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING id, cost_input_id, description, value, is_percentage, is_deleted, created_at, updated_at
`

type CreateStaticValuesParams struct {
	CostInputID int32       `json:"cost_input_id"`
	Description string      `json:"description"`
	Value       float64     `json:"value"`
	IsDeleted   pgtype.Bool `json:"is_deleted"`
}

func (q *Queries) CreateStaticValues(ctx context.Context, arg CreateStaticValuesParams) (StaticValue, error) {
	row := q.db.QueryRow(ctx, createStaticValues,
		arg.CostInputID,
		arg.Description,
		arg.Value,
		arg.IsDeleted,
	)
	var i StaticValue
	err := row.Scan(
		&i.ID,
		&i.CostInputID,
		&i.Description,
		&i.Value,
		&i.IsPercentage,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllStaticValues = `-- name: GetAllStaticValues :many
SELECT id, cost_input_id, description, value, is_percentage, is_deleted, created_at, updated_at FROM static_values
`

func (q *Queries) GetAllStaticValues(ctx context.Context) ([]StaticValue, error) {
	rows, err := q.db.Query(ctx, getAllStaticValues)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []StaticValue{}
	for rows.Next() {
		var i StaticValue
		if err := rows.Scan(
			&i.ID,
			&i.CostInputID,
			&i.Description,
			&i.Value,
			&i.IsPercentage,
			&i.IsDeleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
